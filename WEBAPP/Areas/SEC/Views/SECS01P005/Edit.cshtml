@using FluentBootstrap
@using WEBAPP.Helper
@using DataAccess.SEC
@using UtilityLib
@using UtilityLib

@model SECS01P005Model

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_LayoutChildPage.cshtml";
}

@section stylesheet{
    <link href="@Url.Content("~/Content/DataTables/css/rowReorder.bootstrap.min.css")" rel="stylesheet" />

}

@using (var form = Html.Bootstrap().Form().SetId("form1").SetHorizontal().Begin())
{
    @Html.AntiForgeryToken()

    using (var row1 = Html.Bootstrap().GridRow().Begin()) //row panal
    {
        using (row1.GridColumn(12).SetXs(12).Begin())
        {
            <!-- PAGE CONTENT BEGINS -->
            using (var row1s = Html.Bootstrap().GridRow().Begin())
            {
                using (row1.GridColumn(6).Begin())
                {

                    @form.SelectFor(m => m.COM_CODE, Model.COM_CODE_MODEL.ToSelectList("Value", "Text", Model.COM_CODE), IsSearch: true).IsDisabled()

                }
                using (row1.GridColumn(6).Begin())
                {

                    @form.SelectFor(m => m.SYS_CODE, Model.SYS_CODE_MODEL.ToSelectList("Value", "Text", Model.SYS_CODE), IsSearch: true).IsDisabled()

                }
            }
        }
    }

    using (var row2 = Html.Bootstrap().GridRow().Begin())
    {
        using (row2.GridColumn(12).SetXs(12).Begin())
        {
            using (var row2s = Html.Bootstrap().GridRow().Begin())
            {
                using (row2.GridColumn(6).Begin())
                {
                    @Html.Bootstrap().Table().SetId("GridProgram").SetStyle(TableStyle.TableStripedBorderedHover).AddCss("sourceOrtable")
                }
                using (row2.GridColumn(1).Begin())
                {
                    <div class="ace space-30"></div>
                    <i class="ace-icon fa fa-exchange fa-5x center-block"></i>
                }

                using (row2.GridColumn(5).Begin())
                {
                    <div class="ace space-22"></div>
                    @Html.Bootstrap().Table().SetId("GridSysPrg").SetStyle(TableStyle.TableStripedBorderedHover).AddCss("distinationOrtable").AddAttributes(new { data_tabletype = "multiselect", data_col = "PRG_CODE" })

                }

            }
        }
    }
}

@section scripts{
    <script src="@Url.Content("~/Scripts/DataTables/dataTables.rowReorder.min.js")"></script>
    <script type="text/javascript">
        var RenderSORT = function (data, type, full, meta) {
            var tag = '<a class=\"btn btn-xs btn-info\"> <i class=\"ace-icon fa fa-arrows\"></i></a>';
            return tag;
        };
    </script>

    @Html.GridScript("Program",
        new GridConfig
        {
            GetConfig = new DefaultConfig(Url.Action("GetProgram")),
            DisableDefaultSorting = true,
            DefaultBinding = true,
            ScrollX = false,
            Paging = false,
            WidthType = ColumnsWidthType.Percentage,
            ScrollY = 380,
            ScrollCollapse = true,
            Searching = true,
            VisibleExportButton = false
        },
        new GridColumn("PRG_CODE", Translation.SEC.SECS01P005.PRG_CODE, 20).SetKey(),
        new GridColumn("PRG_NAME", Translation.SEC.SECS01P005.PRG_NAME, 80)
        )

    @Html.GridScript("SysPrg",
        new GridConfig
        {
            GetConfig = new DefaultConfig(Url.Action("GetSysPrg")),
            DisableDefaultSorting = true,
            DefaultBinding = true,
            Paging = false,
            ScrollX = false,
            WidthType = ColumnsWidthType.Percentage,
            ScrollY = 380,
            ScrollCollapse = true,
            VisibleExportButton = false
        },
        new GridColumn("PRG_CODE", Translation.SEC.SECS01P005.PRG_CODE, 20).SetKey().SetOrderable(false),
        new GridColumn("PRG_NAME", Translation.SEC.SECS01P005.PRG_NAME, 80).SetOrderable(false)
        )

    <script type="text/javascript">
        $(document).ready(function () {
            //$("#GridProgram").addClass("sourceOrtable");
            //$("#GridSysPrg").addClass("distinationOrtable");

            $(".sourceOrtable").sortable({
                items: 'tbody tr',
                cursor: 'move',
                connectWith: '#GridProgram,#GridSysPrg',
                axis: 'y,x',
                dropOnEmpty: true,
                receive: function (e, ui) {
                    var sourceIndex = ui.item[0]._DT_RowIndex;
                    var distIndex = ui.item[0].sectionRowIndex;

                    var data = GridSysPrg.row(sourceIndex).data();
                    var data2 = GridProgram.rows().data();
                    var newData = [];

                    if (data != undefined) {

                        if (data2.length > 0) {

                            $.each(data2.toArray(), function (i, item) {
                                if (distIndex < data2.length && i == distIndex) {
                                    newData.push(data);
                                }
                                newData.push(item);

                                if (distIndex == data2.length && distIndex != 0 && i == distIndex - 1) {
                                    newData.push(data);
                                }
                            });
                        }
                        else {
                            newData.push(data);
                        }

                        $('#GridProgram >tr').remove();

                        GridProgram.rows().remove();
                        GridProgram.rows.add(newData).draw();
                        GridSysPrg.row(sourceIndex).remove().draw();
                    }
                    else {
                        GridProgram.row(distIndex).remove().draw();
                        GridSysPrg.row(sourceIndex).remove().draw();
                    }
                }

            });

            $(".distinationOrtable").sortable({
                items: 'tbody tr',
                cursor: 'move',
                connectWith: '#GridSysPrg,#GridProgram',
                axis: 'y,x',
                dropOnEmpty: true,
                receive: function (e, ui) {
                    var sourceIndex = ui.item[0]._DT_RowIndex;
                    var distIndex = ui.item[0].sectionRowIndex;

                    var data = GridProgram.row(sourceIndex).data();
                    var data2 = GridSysPrg.rows().data();
                    var newData = [];
                    if (data2.length > 0) {

                        $.each(data2.toArray(), function (i, item) {
                            if (distIndex < data2.length && i == distIndex) {
                                newData.push(data);
                            }
                            newData.push(item);

                            if (distIndex == data2.length && distIndex != 0 && i == distIndex - 1) {
                                newData.push(data);
                            }
                        });

                    }
                    else {
                        newData.push(data);
                    }

                    $('#GridSysPrg >tr').remove();

                    GridSysPrg.rows().remove();
                    GridSysPrg.rows.add(newData).draw();
                    GridProgram.row(sourceIndex).remove().draw();
                },
                update: function (event, ui) {
                    if (ui.item[0].offsetParent != null) {
                        var gid = ui.item[0].offsetParent.attributes["0"].nodeValue;
                        if (gid == "GridSysPrg" && ui.sender == null) {
                            var sourceIndex = ui.item[0]._DT_RowIndex;
                            var distIndex = ui.item[0].sectionRowIndex;

                            var data = GridSysPrg.row(sourceIndex).data();
                            var data2 = GridSysPrg.rows().data();
                            var newData = [];
                            if (data2.length > 0) {
                                $.each(data2.toArray(), function (i, item) {

                                    if (i != sourceIndex) {
                                        if (distIndex < sourceIndex && i == distIndex) {
                                            newData.push(data);
                                        }
                                        newData.push(item);
                                        if (distIndex > sourceIndex && i == distIndex) {
                                            newData.push(data);
                                        }
                                    }

                                });
                            }
                            else {
                                newData.push(data);
                            }

                            GridSysPrg.rows().remove().draw();
                            GridSysPrg.rows.add(newData).draw();
                        }
                    }
                }
            });
        });
    </script>


}

